{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "11614679859752163203"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources. Use RG location by default"
      }
    },
    "appInsightsLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]"
    },
    "appShortName": {
      "type": "string",
      "maxLength": 6,
      "metadata": {
        "description": "App short name (used for prefixing resources. Make it unique if you are going to deploy multiple instances on the same resource group"
      }
    },
    "appName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "metadata": {
        "description": "The App name, based on short name, Needs to be globally unique within azure."
      }
    },
    "vaultName": {
      "type": "string",
      "defaultValue": "[format('{0}{1}', parameters('appShortName'), uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the key vault to be created."
      }
    },
    "vaultSKU": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "standard",
        "premium"
      ],
      "metadata": {
        "description": "The SKU of the vault to be created."
      }
    },
    "githubAppId": {
      "type": "string",
      "metadata": {
        "description": "The GitHub App ID"
      }
    },
    "certificate": {
      "type": "securestring",
      "metadata": {
        "description": "The PEM certificate for the GitHub App."
      }
    },
    "webHookSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The webhook secret for the GitHub App"
      }
    },
    "ghHooksIpAddresses": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "GitHub webhooks IP addresses. If used maintenance of the IP addresses are required."
      }
    },
    "appStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "additionalIpSecurityRestrictions",
        "count": "[length(parameters('ghHooksIpAddresses'))]",
        "input": {
          "ipAddress": "[parameters('ghHooksIpAddresses')[copyIndex('additionalIpSecurityRestrictions')]]",
          "action": "Allow",
          "tag": "Default",
          "priority": 900,
          "name": "ghhook",
          "description": "Allow request from GitHub.com webhooks"
        }
      }
    ],
    "functionAppName": "[parameters('appName')]",
    "hostingPlanName": "[parameters('appName')]",
    "applicationInsightsName": "[parameters('appName')]",
    "storageAccountName": "[toLower(format('{0}{1}', parameters('appShortName'), uniqueString(resourceGroup().id)))]",
    "pemCertificateName": "[format('{0}-PEM-Certificate', parameters('appShortName'))]",
    "webHookSecretName": "[format('{0}-webhooksecret', parameters('appShortName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('appInsightsLocation')]",
      "tags": {
        "[format('hidden-link:{0}', resourceId('Microsoft.Web/sites', variables('functionAppName')))]": "Resource"
      },
      "properties": {
        "Application_Type": "web"
      },
      "kind": "web"
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "[parameters('appStorageAccountType')]"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "defaultToOAuthAuthentication": true
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-12-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "reserved": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "http20Enabled": true,
          "ftpsState": "Disabled",
          "linuxFxVersion": "node|20",
          "minTlsVersion": "1.2",
          "ipSecurityRestrictions": "[variables('additionalIpSecurityRestrictions')]",
          "ipSecurityRestrictionsDefaultAction": "[if(greater(length(variables('additionalIpSecurityRestrictions')), 0), 'Deny', 'Allow')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), 'appsettings')]",
      "properties": {
        "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]",
        "WEBSITE_CONTENTSHARE": "[toLower(variables('functionAppName'))]",
        "FUNCTIONS_EXTENSION_VERSION": "~4",
        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]",
        "FUNCTIONS_WORKER_RUNTIME": "node",
        "WEBSITE_NODE_DEFAULT_VERSION": "~20",
        "APP_ID": "[parameters('githubAppId')]",
        "PRIVATE_KEY": "[format('@Microsoft.KeyVault(SecretUri={0})', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), variables('pemCertificateName')), '2022-11-01').secretUri)]",
        "WEBHOOK_SECRET": "[format('@Microsoft.KeyVault(SecretUri={0})', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), variables('webHookSecretName')), '2022-11-01').secretUri)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), variables('pemCertificateName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), variables('webHookSecretName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[parameters('vaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-12-01', 'full').identity.principalId]",
            "permissions": {
              "keys": [],
              "secrets": [
                "get"
              ],
              "certificates": []
            }
          }
        ],
        "enableRbacAuthorization": false,
        "enableSoftDelete": false,
        "enabledForDeployment": true,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "[parameters('vaultSKU')]",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', parameters('vaultName'), variables('pemCertificateName'))]",
      "properties": {
        "value": "[parameters('certificate')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', parameters('vaultName'), variables('webHookSecretName'))]",
      "properties": {
        "value": "[parameters('webHookSecret')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaultName'))]"
      ]
    }
  ],
  "outputs": {
    "functionUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-12-01').defaultHostName]"
    }
  }
}
